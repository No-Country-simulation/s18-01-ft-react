#!/usr/bin/env node
const http = require('http');
const app = require('../../app'); // Asegúrate de que esta ruta sea correcta
const { handleSocketEvents } = require('../sockets/roomIo');
const socketIo = require('socket.io');
const dotenv = require('dotenv');

dotenv.config({ path: '../.env' }); // Asegúrate de que el archivo .env existe y está bien configurado

const PORT = normalizePort(process.env.PORT || '3000');
app.set('port', PORT);

// Crear el servidor HTTP
const server = http.createServer(app);
const io = socketIo(server);

// Configurar manejadores de eventos de Socket.io
handleSocketEvents(io);

server.listen(PORT, () => {
  console.log(`Servidor corriendo en http://localhost:${PORT}`);
});

// Funciones de manejo de errores y normalización de puerto
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val; // named pipe
  if (port >= 0) return port; // port number
  return false;
}

server.on('error', onError);
server.on('listening', onListening);

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof PORT === 'string' ? 'Pipe ' + PORT : 'Port ' + PORT;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requiere privilegios elevados');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' está en uso');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log('Escuchando en ' + bind);
}